{"version":3,"sources":["colors.js","components/task_form.jsx","components/edit_task_form.jsx","task_helpers.js","components/todo_list_item.jsx","components/todo_list.jsx","components/add_task_form.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Colors","styles","formGroup","display","flexDirection","fontFamily","fontStyle","TaskForm","props","formTask","onUpdateTask","Form","Group","controlId","style","Label","Control","required","type","value","name","onChange","e","target","autoComplete","description","selected","Date","parse","dueDate","date","formContainer","borderRadius","backgroundColor","closeButton","marginRight","EditTaskForm","task","onHide","onSubmit","useState","updatedTask","setUpdatedTask","handleSubmit","preventDefault","field","toDateString","Button","variant","onClick","dueToday","pastDue","EditModal","show","onSave","Modal","modalContainer","Header","modalHeader","Title","Body","modalBody","color","listItemContainer","border","borderColor","marginBottom","isCompleted","opacity","listItemContent","listItemHeader","alignItems","padding","borderBottom","headerText","margin","checkbox","position","cursor","fontSize","lineHeight","height","width","clear","marginLeft","listItemHeaderContent","justifyContent","minWidth","listItemBody","taskBodyLabel","actionButtons","deleteButton","TodoListItem","componentStyle","toggleCompleted","editTask","deleteTask","taskId","id","taskName","isDueToday","isPastDue","showEditModal","setShowEditModal","styleByDueDate","defaultChecked","className","listContainer","emptyStateContainer","TodoList","taskData","taskList","map","key","ListGroup","aria-labelledby","Object","keys","length","AddTaskForm","blankTask","AddModal","appContainer","welcomeContainer","paddingBottom","welcomeContent","taskStats","taskStat","paddingRight","borderRight","lastTaskStat","taskStatNumber","taskTrackerHeader","appContent","App","storedTaskData","localStorage","getItem","JSON","tasks","setTasks","showAddModal","setShowAddModal","tasksFormattedNoun","numberOfTasks","updateTasks","setItem","stringify","completedTasks","filter","overdueTasks","dueTodayTasks","pastDueCount","inputTask","newTask","nanoid","sortByAttribute","sort","task1","task2","sortedTasks","updatedTasks","editedTaskList","remainingTasks","Boolean","window","location","hostname","match","TASK_DATA","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d942ffe3.chunk.js","sourcesContent":["export const Colors = {\n  maizeCrayola: '#ffd151',\n  middleRed: '#e08d79',\n  blueMunsell: '#348aa7',\n  powderBlue:'#c5e7e2',\n  spaceCadet: '#2b2d42',\n  mintCream: '#f5fffA',\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport DatePicker from \"react-datepicker\";\nimport Form from 'react-bootstrap/Form';\n\nconst TaskForm = (props) => {\n  const { formTask, onUpdateTask } = props;\n  \n  return (\n    <div>\n      <Form.Group controlId=\"formTaskName\" style={styles.formGroup}>\n        <Form.Label>Task name</Form.Label>\n        <Form.Control\n          required\n          type=\"text\"\n          value={formTask.name}\n          onChange={e => onUpdateTask('name', e.target.value)}\n          name=\"name\"\n          autoComplete=\"off\"\n        />\n      </Form.Group>\n      <Form.Group controlId=\"formTaskDescription\" style={styles.formGroup}>\n        <Form.Label>\n          Description\n        </Form.Label>\n        <Form.Control\n          required\n          type=\"text\"\n          value={formTask.description}\n          onChange={e => onUpdateTask('description', e.target.value)}\n          name=\"description\"\n          autoComplete=\"off\"\n        />\n      </Form.Group>\n      <Form.Group controlId=\"formTaskDueDate\" style={styles.formGroup}>\n        <Form.Label>\n          Due date\n        </Form.Label>\n        <DatePicker\n          selected={Date.parse(formTask.dueDate)}\n          onChange={date => onUpdateTask('dueDate', date)}\n        />\n      </Form.Group>\n    </div>\n  );\n};\n\nTaskForm.propTypes = {\n  formTask: PropTypes.object.isRequired,\n  onUpdateTask: PropTypes.func.isRequired,\n};\n\nconst styles = {\n  formGroup: {\n    display: 'flex',\n    flexDirection: 'column',\n    fontFamily: 'Open Sans',\n    fontStyle: 'bold',\n  },\n};\n\nexport default TaskForm;","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Colors } from '../colors.js';\nimport TaskForm from './task_form.jsx';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst EditTaskForm = (props) => {\n  const { task, onHide, onSubmit } = props;\n  const [updatedTask, setUpdatedTask] = useState(task);\n\n  const handleUpdateTaskInput = (field, value) => \n    setUpdatedTask({\n      ...updatedTask,\n      [field]: field === 'dueDate' ? value.toDateString() : value,\n    });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(updatedTask);\n  };\n\n  return (\n    <Form style={styles.formContainer}>\n      <TaskForm formTask={updatedTask} onUpdateTask={handleUpdateTaskInput}/>\n      <Button variant=\"outline-primary\" onClick={onHide} style={styles.closeButton}>\n        Close\n      </Button>\n      <Button variant=\"primary\" onClick={updatedTask => handleSubmit(updatedTask)}>\n        Save\n      </Button>\n    </Form>\n  );\n}\n\nEditTaskForm.propTypes = {\n  task: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n}\n\nconst styles = {\n  formContainer: {\n    borderRadius: '.25rem',\n    backgroundColor: Colors.mintCream,\n  },\n  \n  closeButton: {\n    marginRight: '.5rem',\n  },\n};\n\nexport default EditTaskForm;","export const dueToday = task => (\n  task.dueDate === new Date().toDateString()\n);\n\n// TODO: Fix so that this does not include dueToday tasks;\nexport const pastDue = task => (\n  Date.parse(task.dueDate) < new Date()\n);","import React, { useState } from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport EditTaskForm from './edit_task_form.jsx';\nimport { Colors } from '../colors.js';\nimport { dueToday, pastDue } from '../task_helpers.js';\n\nconst TodoListItem = (props) => {\n  const {\n    task,\n    toggleCompleted, \n    editTask, \n    deleteTask,\n  } = props;\n  const taskId = task.id;\n  const taskName = task.name;\n\n  const isDueToday = dueToday(task);\n  const isPastDue = pastDue(task);\n\n  const [showEditModal, setShowEditModal] = useState(false);\n\n  const handleSave = updatedTask => {\n    editTask(taskId, updatedTask);\n    setShowEditModal(false);\n  }\n\n  const styleByDueDate = (componentStyle) => {\n    if (isDueToday) {\n      return {...componentStyle, ...styles.dueToday};\n    } else if (isPastDue) {\n      return {...componentStyle, ...styles.pastDue};\n    } else {\n      return componentStyle;\n    }\n  }\n\n  const styleByCompleted = (componentStyle) => (\n    task.isCompleted ? {...componentStyle, ...styles.isCompleted} : componentStyle\n  );\n\n  const dueLabel = () => {\n    if (isDueToday) {\n      return '(Due today)';\n    } else if (isPastDue) {\n      return '(Past due)';\n    } else {\n      return '';\n    }\n  };\n\n  return (\n    <div style={styleByDueDate(styles.listItemContainer)}>\n      <EditModal \n        show={showEditModal} \n        onHide={() => setShowEditModal(false)}\n        onSave={task => handleSave(task)}\n        task={task}\n      />\n      <div style={styleByCompleted(styles.listItemContent)}>\n        <div style={styleByDueDate(styles.listItemHeader)}>\n          <input \n            id={taskId} \n            type=\"checkbox\" \n            defaultChecked={task.isCompleted} \n            onChange={() => toggleCompleted(taskId)}\n            style={styles.checkbox}\n          />\n          <div style={styles.listItemHeaderContent}>\n            <h5 className=\"todo-name\" style={styles.headerText}>\n              {taskName} {dueLabel()}\n            </h5>\n            <div style={styles.actionButtons}>\n              {!task.isCompleted && <Button \n                onClick={() => setShowEditModal(true)}>\n                Edit\n              </Button>}\n              <Button \n                variant=\"danger\"\n                onClick={() => deleteTask(taskId)}\n                style={styles.deleteButton}>\n                Delete\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div style={styles.listItemBody}>\n          <div>\n            <p style={styles.taskBodyLabel}>Description</p>\n            <p className=\"todo-description\">\n              {task.description}\n            </p>\n          </div>\n          <div>\n            <span>Due: </span>\n            <span className=\"todo-due-date\">\n              {task.dueDate}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst EditModal = (props) => {\n  const { show, onHide, onSave, task } = props;\n  return (\n    <>\n      <Modal show={show} onHide={onHide} style={styles.modalContainer}>\n        <Modal.Header closeButton style={styles.modalHeader}>\n          <Modal.Title>Edit task</Modal.Title>\n        </Modal.Header>\n        <Modal.Body style={styles.modalBody}>\n          <EditTaskForm task={task} onHide={onHide} onSubmit={onSave} />\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\n// TODO: Refactpr styles; add commonly used styles to generic Styles.js file.\nconst styles = {\n  modalContainer: {\n    borderRadius: '.25rem',\n  },\n  \n  modalHeader: {\n    color: 'white',\n    fontFamily: 'Open Sans',\n    backgroundColor: Colors.blueMunsell,\n  },\n  \n  modalBody: {\n    backgroundColor: Colors.mintCream,\n    borderRadius: '0rem 0rem .25rem .25rem',\n  },\n\n  listItemContainer: {\n    display: 'flex',\n    border: '1px solid',\n    borderColor: Colors.blueMunsell,\n    borderRadius: '.25rem',\n    fontFamily: 'Open Sans',\n    fontStyle: 'bold',\n    marginBottom: '10px',\n  },\n\n  pastDue: {\n    borderColor: Colors.middleRed,\n    backgroundColor: Colors.middleRed,\n  },\n\n  dueToday: {\n    borderColor: Colors.middleRed,\n  },\n\n  isCompleted: {\n    opacity: '0.6',\n  },\n\n  listItemContent: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  \n  listItemHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '10px',\n    borderBottom: '1px solid',\n    borderColor: Colors.blueMunsell,\n    backgroundColor: Colors.blueMunsell,\n    color: 'white',\n  },\n\n  headerText: {\n    margin: 0,\n  },\n  \n  checkbox: {\n    display: 'block',\n    position: 'relative',\n    cursor: 'pointer',\n    fontSize: '22px',\n    lineHeight: '24px',\n    height: '24px',\n    width: '24px',\n    clear: 'both',\n    marginLeft: '5px',\n    marginRight: '15px',\n    border: '1px solid',\n    borderColor: Colors.powderBlue,\n  },\n\n  listItemHeaderContent: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    minWidth: '500px',\n  },\n\n  listItemBody: {\n    backgroundColor: Colors.mintCream,\n    padding: '10px',\n    borderRadius: '0rem 0rem .25rem .25rem',\n  },\n\n  taskBodyLabel: {\n    color: Colors.blueMunsell,\n    borderBottom: '1px solid',\n    borderColor: Colors.blueMunsell,\n    marginBottom: '2px',\n  },\n\n  actionButtons: {\n    display: 'flex',\n  },\n\n  deleteButton: {\n    marginLeft: '5px',\n  },\n}\n\nexport default TodoListItem;","import React from \"react\";\nimport TodoListItem from './todo_list_item.jsx';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Colors } from '../colors.js';\n\nconst TodoList = (props) => {\n  const {taskData, toggleCompleted, editTask, deleteTask} = props;\n\n  const taskList = taskData.map(task => (\n    <TodoListItem\n      key={task.id} \n      task={task}\n      toggleCompleted={toggleCompleted}\n      editTask={editTask}\n      deleteTask={deleteTask}\n    />\n  ));\n\n  const emptyState = () => (\n    <div style={styles.emptyStateContainer}>\n      <h4>\n        Add a task to get started!\n      </h4>\n    </div>\n  );\n\n  return (\n    <ListGroup\n      className=\"todo-list stack-large stack-exception\"\n      aria-labelledby=\"list-heading\"\n      style={styles.listContainer}\n    >\n      {Object.keys(taskData).length ? taskList : emptyState() }\n    </ListGroup>\n  );\n}\n\nconst styles = {\n  listContainer: {\n    display: 'flex',\n  },\n\n  emptyStateContainer: {\n    border: '1px solid',\n    padding: '5rem 10rem',\n    backgroundColor: Colors.mintCream,\n    borderColor: Colors.blueMunsell,\n    borderRadius: '.25rem',\n    fontFamily: 'Open Sans',\n    fontStyle: 'bold',\n    marginBottom: '10px',\n    minWidth: '500px',\n  },\n};\n\nexport default TodoList;","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport TaskForm from './task_form.jsx';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst AddTaskForm = (props) => {\n  const { onSubmit } = props;\n  const blankTask = { name: '', description: '', dueDate: new Date().toDateString() };\n  const [updatedTask, setUpdatedTask] = useState(blankTask);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(updatedTask);\n    setUpdatedTask(blankTask);\n  };\n\n  const handleUpdateTaskInput = (field, value) => {\n    setUpdatedTask({\n      ...updatedTask,\n      [field]: field === 'dueDate' ? value.toDateString() : value,\n    });\n  }\n\n  return (\n    <Form style={styles.formContainer} onSubmit={handleSubmit}>\n      <TaskForm formTask={updatedTask} onUpdateTask={handleUpdateTaskInput} />\n      <Button variant=\"primary\" type=\"submit\" className=\"btn btn__primary btn__lg\">\n        {'Add task'}\n      </Button>\n    </Form>\n  );\n}\n\nAddTaskForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nconst styles = {\n  formContainer: {\n    borderRadius: '.25rem',\n  },\n};\n\nexport default AddTaskForm;","import React, { useState } from \"react\";\nimport './App.css';\nimport TodoList from './components/todo_list.jsx';\nimport AddTaskForm from './components/add_task_form.jsx';\nimport { nanoid } from \"nanoid\";\nimport { Colors } from './colors.js';\nimport { dueToday, pastDue } from './task_helpers.js';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App = props => {\n  const storedTaskData = localStorage.getItem('tasks');\n  const taskData = storedTaskData ? JSON.parse(storedTaskData) : props.taskData;\n  \n  const [tasks, setTasks] = useState(taskData);\n  const [showAddModal, setShowAddModal] = useState(false);\n\n  const tasksFormattedNoun = numberOfTasks => numberOfTasks !== 1 ? 'Tasks' : 'Task';\n\n  const updateTasks = tasks => {\n    setTasks(tasks)\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  };\n\n  const toggleCompleted = id => {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        // override data with switched completed attribute\n        return {...task, isCompleted: !task.isCompleted}\n      }\n      return task;\n    });\n    updateTasks(updatedTasks);\n  };\n  \n  const createTask = (inputTask) => {\n    const newTask = { \n      ...inputTask,\n      id: `task=${nanoid()}`, \n      isCompleted: false, \n    };\n    updateTasks([...tasks, newTask]);\n    setShowAddModal(false);\n  };\n  \n  const deleteTask = id => {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    updateTasks(remainingTasks);\n  };\n\n  const editTask = (id, newTask) => {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        // replace task with updated data\n        return newTask;\n      }\n      return task;\n    });\n    updateTasks(editedTaskList);\n  }\n\n  const sortedTasks = (sortByAttribute) => {\n    switch(sortByAttribute) {\n      case 'dueDate':\n        return tasks.sort((task1, task2) => Date.parse(task1[sortByAttribute]) - Date.parse(task2[sortByAttribute]));\n      default:\n        // TODO: Create cases for additional sorting options.\n        return tasks;\n    }\n  };\n\n  // TODO: Implement filters; this will be passed into Filter Button component.\n  // const handleFilter = (filter) => {}\n\n  const completedTasks = tasks.filter(task => task.isCompleted);\n  const overdueTasks = tasks.filter(task => pastDue(task));\n  const dueTodayTasks = tasks.filter(task => dueToday(task));\n\n  const pastDueCount = overdueTasks.length - dueTodayTasks.length;\n\n  return (\n    <div className=\"todoapp stack-large\" style={styles.appContainer}>\n      <AddModal \n        show={showAddModal} \n        onHide={() => setShowAddModal(false)}\n        onSave={createTask}\n      />\n      <div style={styles.welcomeContainer}>\n        <div style={styles.welcomeContent}>\n          <h1>Welcome!</h1>\n          <div style={styles.taskStats}>\n            <div style={styles.taskStat}>\n              <h5 style={styles.taskStatNumber}>\n                {completedTasks.length} / {tasks.length} \n              </h5>\n              <h4 id=\"list-heading\">\n                {tasksFormattedNoun(tasks.length)} completed\n              </h4>\n            </div>\n            <div style={styles.taskStat}>\n              <h5 style={styles.taskStatNumber}>\n                {dueTodayTasks.length} \n              </h5>\n              <h4 id=\"list-heading\">\n                {tasksFormattedNoun(dueTodayTasks.length)} due today\n              </h4>\n            </div>\n            <div style={styles.lastTaskStat}>\n              {\n                /* \n                * TODO: Currently overdue tasks also includes tasks due today;\n                * once this is fixed, revert this to just use overdueTasks\n                */\n              }\n              <h5 style={{...styles.taskStatNumber, ...{color: pastDueCount > 0 ? Colors.middleRed : Colors.blueMunsell}}}>\n                {pastDueCount} \n              </h5>\n              <h4 id=\"list-heading\">\n                {tasksFormattedNoun(pastDueCount)} past due\n              </h4>\n            </div>\n          </div>\n          <Button \n            onClick={() => setShowAddModal(true)}>\n            Add task\n          </Button>\n        </div>\n      </div>\n      <div style={styles.appContent}>\n        <TodoList \n          taskData={sortedTasks('dueDate')}\n          toggleCompleted={toggleCompleted}\n          editTask={editTask}\n          deleteTask={deleteTask}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst AddModal = (props) => {\n  const { show, onHide, onSave } = props;\n  return (\n    <>\n      <Modal show={show} onHide={onHide} style={styles.modalContainer}>\n        <Modal.Header closeButton style={styles.modalHeader}>\n          <Modal.Title>New task</Modal.Title>\n        </Modal.Header>\n        <Modal.Body style={styles.modalBody}>\n          <AddTaskForm onSubmit={onSave} />\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = {\n  appContainer: {\n    padding: '3rem',\n    height: '100vh',\n    backgroundColor: Colors.powderBlue,\n  },\n\n  modalContainer: {\n    borderRadius: '.25rem',\n  },\n  \n  modalHeader: {\n    color: 'white',\n    fontFamily: 'Open Sans',\n    backgroundColor: Colors.blueMunsell,\n  },\n  \n  modalBody: {\n    backgroundColor: Colors.mintCream,\n    borderRadius: '0rem 0rem .25rem .25rem',\n  },\n\n  welcomeContainer: {\n    color: Colors.spaceCadet,\n    borderBottom: '1px solid',\n    borderColor: Colors.blueMunsell,\n    marginBottom: '3rem',\n    paddingBottom: '3rem',\n    fontFamily: 'Open Sans',\n    fontStyle: 'bold',\n  },\n  \n  welcomeContent: {\n    padding: '4rem',\n    border: '1px solid',\n    borderColor: Colors.blueMunsell,\n    backgroundColor: Colors.mintCream,\n    borderRadius: '.25rem',\n  },\n\n  taskStats: {\n    display: 'flex',\n    margin: '2rem 0rem',\n    borderColor: Colors.blueMunsell,\n  },\n\n  taskStat: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginRight: '2rem',\n    paddingRight: '2rem',\n    borderRight: '1px solid',\n  },\n  \n  lastTaskStat: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  \n  taskStatNumber: {\n    color: Colors.blueMunsell,\n    fontSize: '4rem',\n  },\n\n  taskTrackerHeader: {\n    color: Colors.blueMunsell,\n    borderBottom: '1px solid',\n    borderColor: Colors.blueMunsell,\n    marginBottom: '2px',\n  },\n\n  appContent: {\n    flexDirection: 'row',\n    display: 'flex',\n  },\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst TASK_DATA = [\n  { \n    id: \"todo-0\", \n    name: \"Do something!\", \n    isCompleted: true, \n    description: 'Your first task is to do something fun!', \n    dueDate: new Date().toDateString()},\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App taskData={TASK_DATA} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}